BaseGeometry testing
====================

module import:
>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

create an instance
>>> bg = BaseGeometry()

Value is not an integer:
>>> bg.integer_validator("name", "John")
Traceback (most recent call last):
...
TypeError: name must be an integer

Value less than zero:
>>> bg.integer_validator("Jason", -98)
Traceback (most recent call last):
...
ValueError: Jason must be greater than 0

Value equal to zero:
>>> bg.integer_validator("Jason", 0)
Traceback (most recent call last):
...
ValueError: Jason must be greater than 0

Name is an empty string:
>>> bg.integer_validator("", 89)

Value is None:
>>> bg.integer_validator("Jason", None)
Traceback (most recent call last):
...
TypeError: must be an integer

One argument is passed:
>>> bg.integer_validator("Jason")
Traceback (most recent call last):
...
TypeError: integer_validator() missing 1 required positional argument: 'value'
>>> bg.integer_validator(7)
Traceback (most recent call last):
...
TypeError: integer_validator() missing 1 required positional argument: 'value'

No arguments are passed:
>>> bg.integer_validator()
Traceback (most recent call last):
...
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

Argument value too large:
>>> bg.integer_validator("Jason", float("inf"))
Traceback (most recent call last):
...
TypeError: must be an integer

>>> bg.area()
Traceback (most recent call last):
...
Exception: area() is not implemented
